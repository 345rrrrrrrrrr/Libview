{"status": "success", "library_name": "Flask", "examples": [{"title": "Blueprint Example 1", "code": "A blueprint is an object that allows defining application functions\nwithout requiring an application object ahead of time. It uses the\nsame decorators as :class:`~flask.Flask`, but defers the need for an\napplication by recording them for later registration.", "language": "python", "source": "Flask.Blueprint Documentation", "url": ""}, {"title": "Blueprint Example 2", "code": "Decorating a function with a blueprint creates a deferred function\nthat is called with :class:`~flask.blueprints.BlueprintSetupState`\nwhen the blueprint is registered on an application.", "language": "python", "source": "Flask.Blueprint Documentation", "url": ""}, {"title": "Blueprint Example 3", "code": "See :doc:`/blueprints` for more information.", "language": "python", "source": "Flask.Blueprint Documentation", "url": ""}, {"title": "Blueprint Example 4", "code": ":param name: The name of the blueprint. Will be prepended to each\n    endpoint name.\n:param import_name: The name of the blueprint package, usually\n    ``__name__``. This helps locate the ``root_path`` for the\n    blueprint.\n:param static_folder: A folder with static files that should be\n    served by the blueprint's static route. The path is relative to\n    the blueprint's root path. Blueprint static files are disabled\n    by default.\n:param static_url_path: The url to serve static files from.\n    Defaults to ``static_folder``. If the blueprint does not have\n    a ``url_prefix``, the app's static route will take precedence,\n    and the blueprint's static files won't be accessible.\n:param template_folder: A folder with templates that should be added\n    to the app's template search path. The path is relative to the\n    blueprint's root path. Blueprint templates are disabled by\n    default. Blueprint templates have a lower precedence than those\n    in the app's templates folder.\n:param url_prefix: A path to prepend to all of the blueprint's URLs,\n    to make them distinct from the rest of the app's routes.\n:param subdomain: A subdomain that blueprint routes will match on by\n    default.\n:param url_defaults: A dict of default values that blueprint routes\n    will receive by default.\n:param root_path: By default, the blueprint will automatically set\n    this based on ``import_name``. In certain situations this\n    automatic detection can fail, so the path can be specified\n    manually instead.", "language": "python", "source": "Flask.Blueprint Documentation", "url": ""}, {"title": "Config Example 1", "code": "Or alternatively you can define the configuration options in the\nmodule that calls :meth:`from_object` or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call::", "language": "python", "source": "Flask.Config Documentation", "url": ""}, {"title": "Config Example 2", "code": "In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application.", "language": "python", "source": "Flask.Config Documentation", "url": ""}, {"title": "Flask Example 1", "code": "object.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more.", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Flask Example 2", "code": "The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Flask Example 3", "code": "Usually you create a :class:`Flask` instance in your main module or\nin the :file:`__init__.py` file of your package like this::", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Flask Example 4", "code": "from flask import Flask\napp = Flask(__name__)", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Flask Example 5", "code": "For example if your application is defined in :file:`yourapplication/app.py`\nyou should create it with one of the two versions below::", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Flask Example 6", "code": "Why is that?  The application will work even with `__name__`, thanks\nto how resources are looked up.  However it will make debugging more\npainful.  Certain extensions can make assumptions based on the\nimport name of your application.  For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.  If the import name is not properly set\nup, that debugging information is lost.  (For example it would only\npick up SQL queries in `yourapplication.app` and not\n`yourapplication.views.frontend`)", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Flask Example 7", "code": ":param import_name: the name of the application package\n:param static_url_path: can be used to specify a different path for the\n                        static files on the web.  Defaults to the name\n                        of the `static_folder` folder.\n:param static_folder: The folder with static files that is served at\n    ``static_url_path``. Relative to the application ``root_path``\n    or an absolute path. Defaults to ``'static'``.\n:param static_host: the host to use when adding the static route.\n    Defaults to None. Required when using ``host_matching=True``\n    with a ``static_folder`` configured.\n:param host_matching: set ``url_map.host_matching`` attribute.\n    Defaults to False.\n:param subdomain_matching: consider the subdomain relative to\n    :data:`SERVER_NAME` when matching routes. Defaults to False.\n:param template_folder: the folder that contains the templates that should\n                        be used by the application.  Defaults to\n                        ``'templates'`` folder in the root path of the\n                        application.\n:param instance_path: An alternative instance path for the application.\n                      By default the folder ``'instance'`` next to the\n                      package or module is assumed to be the instance\n                      path.\n:param instance_relative_config: if set to ``True`` relative filenames\n                                 for loading the config are assumed to\n                                 be relative to the instance path instead\n                                 of the application root.\n:param root_path: The path to the root of the application files.\n    This should only be set manually when it can't be detected\n    automatically, such as for namespace packages.", "language": "python", "source": "Flask.Flask Documentation", "url": ""}, {"title": "Markup Example 1", "code": "    def __html__(self):\n        return '<a href=\"/foo\">foo</a>'\n", "language": "python", "source": "Flask.Markup Documentation", "url": ""}, {"title": "Markup Example 2", "code": "Passing an object to the constructor converts it to text and wraps\nit to mark it safe without escaping. To escape the text, use the\n:meth:`escape` class method instead.", "language": "python", "source": "Flask.Markup Documentation", "url": ""}, {"title": "Markup Example 3", "code": ">>> class Foo:\n...     def __html__(self):\n...         return '<a href=\"/foo\">foo</a>'\n...\n>>> Markup(Foo())\nMarkup('<a href=\"/foo\">foo</a>')", "language": "python", "source": "Flask.Markup Documentation", "url": ""}, {"title": "Markup Example 4", "code": "This is a subclass of :class:`str`. It has the same methods, but\nescapes their arguments and returns a ``Markup`` instance.", "language": "python", "source": "Flask.Markup Documentation", "url": ""}, {"title": "Request Example 1", "code": "It is what ends up as :class:`~flask.request`.  If you want to replace\nthe request object used you can subclass this and set\n:attr:`~flask.Flask.request_class` to your subclass.", "language": "python", "source": "Flask.Request Documentation", "url": ""}, {"title": "Request Example 2", "code": "The request object is a :class:`~werkzeug.wrappers.Request` subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones.", "language": "python", "source": "Flask.Request Documentation", "url": ""}, {"title": "Response Example 1", "code": "response object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don't have to create this object yourself because\n:meth:`~flask.Flask.make_response` will take care of that for you.", "language": "python", "source": "Flask.Response Documentation", "url": ""}, {"title": "after_this_request Example 1", "code": "@app.route('/')\ndef index():\n    @after_this_request\n    def add_header(response):\n        response.headers['X-Foo'] = 'Parachute'\n        return response\n    return 'Hello World!'", "language": "python", "source": "Flask.after_this_request Documentation", "url": ""}, {"title": "after_this_request Example 2", "code": "This is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.", "language": "python", "source": "Flask.after_this_request Documentation", "url": ""}, {"title": "copy_current_request_context Example 1", "code": "request context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.  The current session is also\nincluded in the copied request context.", "language": "python", "source": "Flask.copy_current_request_context Documentation", "url": ""}, {"title": "copy_current_request_context Example 2", "code": "import gevent\nfrom flask import copy_current_request_context", "language": "python", "source": "Flask.copy_current_request_context Documentation", "url": ""}, {"title": "copy_current_request_context Example 3", "code": "@app.route('/')\ndef index():\n    @copy_current_request_context\n    def do_some_work():\n        # do some work here, it can access flask.request or\n        # flask.session like you would otherwise in the view function.\n        ...\n    gevent.spawn(do_some_work)\n    return 'Regular response'", "language": "python", "source": "Flask.copy_current_request_context Documentation", "url": ""}, {"title": "escape Example 1", "code": "the string with HTML-safe sequences. Use this if you need to display\ntext that might contain such characters in HTML.", "language": "python", "source": "Flask.escape Documentation", "url": ""}, {"title": "escape Example 2", "code": "If the object has an ``__html__`` method, it is called and the\nreturn value is assumed to already be safe for HTML.", "language": "python", "source": "Flask.escape Documentation", "url": ""}, {"title": "escape Example 3", "code": ":param s: An object to be converted to a string and escaped.\n:return: A :class:`Markup` string with the escaped text.", "language": "python", "source": "Flask.escape Documentation", "url": ""}, {"title": "flash Example 1", "code": ":param message: the message to be flashed.\n:param category: the category for the message.  The following values\n                 are recommended: ``'message'`` for any kind of message,\n                 ``'error'`` for errors, ``'info'`` for information\n                 messages and ``'warning'`` for warnings.  However any\n                 kind of string can be used as category.", "language": "python", "source": "Flask.flash Documentation", "url": ""}, {"title": "get_flashed_messages Example 1", "code": "* `with_categories` controls whether categories are returned with message\n  text (``True`` gives a tuple, where ``False`` gives just the message text).\n* `category_filter` filters the messages down to only those matching the\n  provided categories.", "language": "python", "source": "Flask.get_flashed_messages Documentation", "url": ""}, {"title": "get_flashed_messages Example 2", "code": "See :doc:`/patterns/flashing` for examples.", "language": "python", "source": "Flask.get_flashed_messages Documentation", "url": ""}, {"title": "get_template_attribute Example 1", "code": "invoke a macro from within Python code.  If you for example have a\ntemplate named :file:`_cider.html` with the following contents:", "language": "python", "source": "Flask.get_template_attribute Documentation", "url": ""}, {"title": "has_request_context Example 1", "code": "not this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.", "language": "python", "source": "Flask.has_request_context Documentation", "url": ""}, {"title": "has_request_context Example 2", "code": "class User(db.Model):", "language": "python", "source": "Flask.has_request_context Documentation", "url": ""}, {"title": "has_request_context Example 3", "code": "def __init__(self, username, remote_addr=None):\n    self.username = username\n    if remote_addr is None and has_request_context():\n        remote_addr = request.remote_addr\n    self.remote_addr = remote_addr", "language": "python", "source": "Flask.has_request_context Documentation", "url": ""}, {"title": "has_request_context Example 4", "code": "Alternatively you can also just test any of the context bound objects\n(such as :class:`request` or :class:`g`) for truthness::", "language": "python", "source": "Flask.has_request_context Documentation", "url": ""}, {"title": "has_request_context Example 5", "code": "class User(db.Model):", "language": "python", "source": "Flask.has_request_context Documentation", "url": ""}, {"title": "has_request_context Example 6", "code": "def __init__(self, username, remote_addr=None):\n    self.username = username\n    if remote_addr is None and request:\n        remote_addr = request.remote_addr\n    self.remote_addr = remote_addr", "language": "python", "source": "Flask.has_request_context Documentation", "url": ""}, {"title": "jsonify Example 1", "code": "with the :mimetype:`application/json` mimetype.", "language": "python", "source": "Flask.jsonify Documentation", "url": ""}, {"title": "jsonify Example 2", "code": "from flask import jsonify", "language": "python", "source": "Flask.jsonify Documentation", "url": ""}, {"title": "jsonify Example 3", "code": "@app.route(\"/users/me\")\ndef get_current_user():\n    return jsonify(\n        username=g.user.username,\n        email=g.user.email,\n        id=g.user.id,\n    )", "language": "python", "source": "Flask.jsonify Documentation", "url": ""}, {"title": "jsonify Example 4", "code": "The default output omits indents and spaces after separators. In\ndebug mode or if :data:`JSONIFY_PRETTYPRINT_REGULAR` is ``True``,\nthe output will be formatted to be easier to read.", "language": "python", "source": "Flask.jsonify Documentation", "url": ""}, {"title": "jsonify Example 5", "code": ".. versionchanged:: 0.11\n    Added support for serializing top-level arrays. This introduces\n    a security risk in ancient browsers. See :ref:`security-json`.", "language": "python", "source": "Flask.jsonify Documentation", "url": ""}, {"title": "make_response Example 1", "code": "def index():\n    return render_template('index.html', foo=42)", "language": "python", "source": "Flask.make_response Documentation", "url": ""}, {"title": "make_response Example 2", "code": "def index():\n    response = make_response(render_template('index.html', foo=42))\n    response.headers['X-Parachutes'] = 'parachutes are cool'\n    return response", "language": "python", "source": "Flask.make_response Documentation", "url": ""}, {"title": "make_response Example 3", "code": "This function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode::", "language": "python", "source": "Flask.make_response Documentation", "url": ""}, {"title": "make_response Example 4", "code": "The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators::", "language": "python", "source": "Flask.make_response Documentation", "url": ""}, {"title": "make_response Example 5", "code": "-   if no arguments are passed, it creates a new response argument\n-   if one argument is passed, :meth:`flask.Flask.make_response`\n    is invoked with it.\n-   if more than one argument is passed, the arguments are passed\n    to the :meth:`flask.Flask.make_response` function as tuple.", "language": "python", "source": "Flask.make_response Documentation", "url": ""}, {"title": "redirect Example 1", "code": "redirects the client to the target location. Supported codes are\n301, 302, 303, 305, 307, and 308. 300 is not supported because\nit's not a real redirect and 304 because it's the answer for a\nrequest with a request with defined If-Modified-Since headers.", "language": "python", "source": "Flask.redirect Documentation", "url": ""}, {"title": "redirect Example 2", "code": ".. versionadded:: 0.10\n    The class used for the Response object can now be passed in.", "language": "python", "source": "Flask.redirect Documentation", "url": ""}, {"title": "redirect Example 3", "code": ":param location: the location the response should redirect to.\n:param code: the redirect status code. defaults to 302.\n:param class Response: a Response class to use when instantiating a\n    response. The default is :class:`werkzeug.wrappers.Response` if\n    unspecified.", "language": "python", "source": "Flask.redirect Documentation", "url": ""}, {"title": "render_template Example 1", "code": ":param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.", "language": "python", "source": "Flask.render_template Documentation", "url": ""}, {"title": "render_template_string Example 1", "code": "with the given context. Template variables will be autoescaped.", "language": "python", "source": "Flask.render_template_string Documentation", "url": ""}, {"title": "send_file Example 1", "code": "The first argument can be a file path or a file-like object. Paths\nare preferred in most cases because Werkzeug can manage the file and\nget extra information from the path. Passing a file-like object\nrequires that the file is opened in binary mode, and is mostly\nuseful when building a file in memory with :class:`io.BytesIO`.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 2", "code": "If the WSGI server sets a ``file_wrapper`` in ``environ``, it is\nused, otherwise Werkzeug's built-in wrapper is used. Alternatively,\nif the HTTP server supports ``X-Sendfile``, configuring Flask with\n``USE_X_SENDFILE = True`` will tell the server to send the given\npath, which is much more efficient than reading it in Python.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 3", "code": ":param path_or_file: The path to the file to send, relative to the\n    current working directory if a relative path is given.\n    Alternatively, a file-like object opened in binary mode. Make\n    sure the file pointer is seeked to the start of the data.\n:param mimetype: The MIME type to send for the file. If not\n    provided, it will try to detect it from the file name.\n:param as_attachment: Indicate to a browser that it should offer to\n    save the file instead of displaying it.\n:param download_name: The default name browsers will use when saving\n    the file. Defaults to the passed file name.\n:param conditional: Enable conditional and range responses based on\n    request headers. Requires passing a file path and ``environ``.\n:param etag: Calculate an ETag for the file, which requires passing\n    a file path. Can also be a string to use instead.\n:param last_modified: The last modified time to send for the file,\n    in seconds. If not provided, it will try to detect it from the\n    file path.\n:param max_age: How long the client should cache the file, in\n    seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n    it will be ``no-cache`` to prefer conditional caching.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 4", "code": ".. versionchanged:: 2.0\n    ``download_name`` replaces the ``attachment_filename``\n    parameter. If ``as_attachment=False``, it is passed with\n    ``Content-Disposition: inline`` instead.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 5", "code": ".. versionchanged:: 2.0\n    Passing a file-like object that inherits from\n    :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n    than sending an empty file.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 6", "code": ".. versionchanged:: 1.1\n    ``filename`` may be a :class:`~os.PathLike` object.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 7", "code": ".. versionchanged:: 1.1\n    Passing a :class:`~io.BytesIO` object supports range requests.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 8", "code": ".. versionchanged:: 1.0.3\n    Filenames are encoded with ASCII instead of Latin-1 for broader\n    compatibility with WSGI servers.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 9", "code": ".. versionchanged:: 0.12\n    ``attachment_filename`` is preferred over ``filename`` for MIME\n    detection.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_file Example 10", "code": ".. versionchanged:: 0.7\n    MIME guessing and etag support for file-like objects was\n    deprecated because it was unreliable. Pass a filename if you are\n    able to, otherwise attach an etag yourself.", "language": "python", "source": "Flask.send_file Documentation", "url": ""}, {"title": "send_from_directory Example 1", "code": "@app.route(\"/uploads/<path:name>\")\ndef download_file(name):\n    return send_from_directory(\n        app.config['UPLOAD_FOLDER'], name, as_attachment=True\n    )", "language": "python", "source": "Flask.send_from_directory Documentation", "url": ""}, {"title": "stream_with_context Example 1", "code": "This is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.", "language": "python", "source": "Flask.stream_with_context Documentation", "url": ""}, {"title": "stream_with_context Example 2", "code": "This function however can help you keep the context around for longer::", "language": "python", "source": "Flask.stream_with_context Documentation", "url": ""}, {"title": "stream_with_context Example 3", "code": "from flask import stream_with_context, request, Response", "language": "python", "source": "Flask.stream_with_context Documentation", "url": ""}, {"title": "stream_with_context Example 4", "code": "@app.route('/stream')\ndef streamed_response():\n    @stream_with_context\n    def generate():\n        yield 'Hello '\n        yield request.args['name']\n        yield '!'\n    return Response(generate())", "language": "python", "source": "Flask.stream_with_context Documentation", "url": ""}, {"title": "stream_with_context Example 5", "code": "from flask import stream_with_context, request, Response", "language": "python", "source": "Flask.stream_with_context Documentation", "url": ""}, {"title": "stream_with_context Example 6", "code": "@app.route('/stream')\ndef streamed_response():\n    def generate():\n        yield 'Hello '\n        yield request.args['name']\n        yield '!'\n    return Response(stream_with_context(generate()))", "language": "python", "source": "Flask.stream_with_context Documentation", "url": ""}, {"title": "url_for Example 1", "code": "Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.  If the value of a query argument\nis ``None``, the whole pair is skipped.  In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot (``.``).", "language": "python", "source": "Flask.url_for Documentation", "url": ""}, {"title": "url_for Example 2", "code": "To integrate applications, :class:`Flask` has a hook to intercept URL build\nerrors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\nfunction results in a :exc:`~werkzeug.routing.BuildError` when the current\napp does not have a URL for the given endpoint and values.  When it does, the\n:data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if\nit is not ``None``, which can return a string to use as the result of\n`url_for` (instead of `url_for`'s default to raise the\n:exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.\nAn example::", "language": "python", "source": "Flask.url_for Documentation", "url": ""}, {"title": "url_for Example 3", "code": "def external_url_handler(error, endpoint, values):\n    \"Looks up an external URL when `url_for` cannot build a URL.\"\n    # This is an example of hooking the build_error_handler.\n    # Here, lookup_url is some utility function you've built\n    # which looks up the endpoint in some external URL registry.\n    url = lookup_url(endpoint, **values)\n    if url is None:\n        # External lookup did not have a URL.\n        # Re-raise the BuildError, in context of original traceback.\n        exc_type, exc_value, tb = sys.exc_info()\n        if exc_value is error:\n            raise exc_type(exc_value).with_traceback(tb)\n        else:\n            raise error\n    # url_for will use this result, instead of raising BuildError.\n    return url", "language": "python", "source": "Flask.url_for Documentation", "url": ""}, {"title": "url_for Example 4", "code": "Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and\n`endpoint` and `values` are the arguments passed into `url_for`.  Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors.", "language": "python", "source": "Flask.url_for Documentation", "url": ""}, {"title": "url_for Example 5", "code": ":param endpoint: the endpoint of the URL (name of the function)\n:param values: the variable arguments of the URL rule\n:param _external: if set to ``True``, an absolute URL is generated. Server\n  address can be changed via ``SERVER_NAME`` configuration variable which\n  falls back to the `Host` header, then to the IP and port of the request.\n:param _scheme: a string specifying the desired URL scheme. The `_external`\n  parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n  behavior uses the same scheme as the current request, or\n  :data:`PREFERRED_URL_SCHEME` if no request context is available.\n  This also can be set to an empty string to build protocol-relative\n  URLs.\n:param _anchor: if provided this is added as anchor to the URL.\n:param _method: if provided this explicitly specifies an HTTP method.", "language": "python", "source": "Flask.url_for Documentation", "url": ""}, {"title": "PURU-THAKUR/MY-PROJECT - from flask import Flask, render_template.py", "code": "from flask import Flask, render_template, request, redirect, url_for, flash\nfrom flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///scr_system.db'\napp.config['SECRET_KEY'] = 'your_secret_key'\ndb = SQLAlchemy(app)\n\n# Models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), nullable=False)\n    role = db.Column(db.String(50), nullable=False)\n\nclass ChangeRequest(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    priority = db.Column(db.String(50), nullable=False)\n    status = db.Column(db.String(50), default='Pending')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n\n# Routes\n@app.route('/')\ndef index():\n    change_requests = ChangeRequest.query.all()\n    return render_template('index.html', change_requests=change_requests)", "language": "python", "source": "GitHub", "url": "https://github.com/PURU-THAKUR/MY-PROJECT/blob/9cece3e5b2b8d3a9b16d019c27c6464cdb63bde2/from%20flask%20import%20Flask,%20render_template.py"}, {"title": "DMTF/Redfish-Interface-Emulator - g.py", "code": "#\n# The canonical way to share information across modules within a single program\n# is to create a special module (often called config or cfg). So this file\n# should be called config.py.  But too late, now.\n\nfrom flask import Flask\nfrom flask_restful import Api\n\n# Settings from emulator-config.json\n#\nstaticfolders = []\n\n# Base URI. Will get overwritten in emulator.py\nrest_base = 'base'\n\n# Create Flask server\napp = Flask(__name__)\n\n# Create RESTful API\napi = Api(app)", "language": "python", "source": "GitHub", "url": "https://github.com/DMTF/Redfish-Interface-Emulator/blob/aea2a52bc4e5b6927227a30e92fee9d5957fd565/g.py"}, {"title": "yaoqi3344/General_Agent_Creation_toolbox-- - OM/om_flask/om.py", "code": "from flask import Flask, render_template, request, jsonify,redirect,url_for\nfrom apscheduler.schedulers.background import BackgroundScheduler\nimport os\nimport subprocess\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.header import Header\nimport time\n\napp = Flask(__name__)\nscheduler = BackgroundScheduler()\ntasks = []\nnext_task_id = 1  # \u521d\u59cb\u5316\u4efb\u52a1ID\n\n# \u90ae\u4ef6\u670d\u52a1\u5668\u914d\u7f6e\nSMTP_HOST = \"smtp.126.com\"\nSMTP_PORT = 465\nSMTP_USERNAME = \"yaoqi100@126.com\"\nSMTP_PASSWORD = \"RJFGUBFZAKLELMBD\"\nSENDER_EMAIL = \"yaoqi100@126.com\"\n\ndef send_email(subject, message, recipient_email):\n    msg = MIMEText(message, 'plain', 'utf-8')\n    msg['Subject'] = Header(subject, 'utf-8')\n    msg['From'] = SENDER_EMAIL\n    msg['To'] = recipient_email\n    try:\n        smtpObj = smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT)\n        smtpObj.login(SMTP_USERNAME, SMTP_PASSWORD)\n        smtpObj.sendmail(SENDER_EMAIL, [recipient_email], msg.as_string())", "language": "python", "source": "GitHub", "url": "https://github.com/yaoqi3344/General_Agent_Creation_toolbox--/blob/27091b74ede3f7e256b8adf36908e45ad18bff49/OM/om_flask/om.py"}, {"title": "KalyanM45/OpenHealth - a.py", "code": "import subprocess\nimport numpy as np\nfrom PIL import Image\nfrom tensorflow.keras.models import load_model\nfrom src.utils import gen_from_image, gen_from_text, get_med\nfrom flask import Flask, render_template,request,redirect,url_for\nfrom src.Multi_Disease_System.Parkinsons_Disease_Prediction.pipelines.Prediction_pipeline import Parkinsons_Data, PredictParkinsons\nfrom src.Multi_Disease_System.Breast_Cancer_Prediction.pipelines.Prediction_pipeline import BCancer_Data, PredictBCancer\nfrom src.Multi_Disease_System.Diabetes_Disease_Prediction.pipelines.Prediction_pipeline import Diabetes_Data, PredictDiabetes\nfrom src.Multi_Disease_System.Heart_Disease_Prediction.pipelines.Prediction_pipeline import CustomData, PredictPipeline\nbrain_model = load_model('Artifacts\\Brain_Tumour\\BrainModel.h5')\nkidney_model = load_model('Artifacts\\Kidney_Disease\\Kidney_Model.h5')\n#lung_model = load_model('Artifacts\\Lung_Disease\\Lung_Model.h5')\nlivermodel = pickle.load(open('Artifacts\\Liver_Disease\\Liver_Model.pkl', 'rb'))\n#liverpreprocessor = pickle.load(open('Artifacts\\Liver_Disease\\Liver_Preprocessor.pkl', 'rb'))\n\n\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    try:\n        return render_template('landing.html')\n    except:\n        return render_template('error.html')\n    \n@app.route('/services')\ndef index1():\n    try:\n        return render_template('services.html')\n    except:\n        return render_template('error.html')\n    \n'''@app.route('/landing')", "language": "python", "source": "GitHub", "url": "https://github.com/KalyanM45/OpenHealth/blob/2589817b390e1a5022ed721d7dddd3d7f693dcd0/a.py"}, {"title": "MuirlandOracle/up-http-tool - up", "code": "from rich.console import Console\nfrom rich.columns import Columns\nfrom rich.table import Table\nfrom datetime import datetime\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom flask import Flask, send_from_directory, request, cli\n\n\n\n##### Network Interface Interaction #####\nclass Interfaces():\n    \"\"\"Network Interfaces Class\n    Wrapper around netifaces library to obtain all IP addresses assigned to interfaces on the system and store these for easy processing.\n    \n    Attributes:\n    - workingIP: string\n        - The current IP address stored in the object. Defaults to 0.0.0.0\n    - interfaces: dict\n        - A dictionary containing interfaces to addresses\n        - e.g.: {\"eth0\":[\"192.168.0.1\",\"192.168.0.2\"]}\n        - Interfaces are unlikely to have more than one address, but the functionality to handle it is there\n    - addresses: dict\n        - Quick lookup dictionary containing addresses to interfaces\n        - e.g.: {\"192.168.0.1\":\"eth0\"}\n\n    \"\"\"\n    def __init__(self: object):\n        \"Initialise Class, including obtaining all addresses using netifaces\"\n        self.workingIP = \"0.0.0.0\" # Default to all interfaces\n        self.interfaces = {}\n        self.addresses = {}\n\n        # Extract interfaces\n        interfaces = netifaces.interfaces()\n        for i in interfaces:", "language": "python", "source": "GitHub", "url": "https://github.com/MuirlandOracle/up-http-tool/blob/7df10fa4bc6d9125a5227ced3022a52a6fbf16e0/up"}, {"title": "Get the data received in a Flask request", "code": "from flask import request\n\n@app.route('/', methods=['GET', 'POST'])\ndef parse_request():\n    data = request.data  # data is empty\n    # need posted data here\n", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/10434599/get-the-data-received-in-a-flask-request"}, {"title": "How to serve static files in Flask", "code": "import os.path\n\nfrom flask import Flask, Response\n\n\napp = Flask(__name__)\napp.config.from_object(__name__)\n\n\ndef root_dir():  # pragma: no cover\n    return os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_file(filename):  # pragma: no cover\n    try:\n        src = os.path.join(root_dir(), filename)\n        # Figure out how flask returns static files\n        # Tried:\n        # - render_template\n        # - send_file\n        # This should not be so non-obvious\n        return open(src).read()\n    except IOError as exc:\n        return str(exc)\n\n\n@app.route('/', methods=['GET'])\ndef metrics():  # pragma: no cover\n    content = get_file('jenkins_analytics.html')\n    return Response(content, mimetype=\"text/html\")\n\n\n@app.route('/', defaults={'path': ''})\n@app.route('/<path:path>')\ndef get_resource(path):  # pragma: no cover\n    mimetypes = {\n        \".css\": \"text/css\",\n        \".html\": \"text/html\",\n        \".js\": \"application/javascript\",\n    }\n    complete_path = os.path.join(root_dir(), path)\n    ext = os.path.splitext(path)[1]\n    mimetype = mimetypes.get(ext, \"text/html\")\n    content = get_file(complete_path)\n    return Response(content, mimetype=mimetype)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    app.run(port=80)\n", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/20646822/how-to-serve-static-files-in-flask"}, {"title": "Configure Flask dev server to be visible across the network", "code": "http://localhost:5000", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/7023052/configure-flask-dev-server-to-be-visible-across-the-network"}, {"title": "Configure Flask dev server to be visible across the network", "code": "http://[dev-host-ip]:5000", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/7023052/configure-flask-dev-server-to-be-visible-across-the-network"}, {"title": "Return JSON response from Flask view", "code": "@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    # send it back as json\n", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/13081532/return-json-response-from-flask-view"}, {"title": "How do you access the query string in Flask routes?", "code": "example.com/data?abc=123", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/11774265/how-do-you-access-the-query-string-in-flask-routes"}, {"title": "How do you access the query string in Flask routes?", "code": "@app.route(\"/data\")\ndef data():\n    # query_string = ???\n    return render_template(\"data.html\")\n", "language": "python", "source": "Stack Overflow", "url": "https://stackoverflow.com/questions/11774265/how-do-you-access-the-query-string-in-flask-routes"}], "timestamp": 1745331778}